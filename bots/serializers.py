from rest_framework import serializers
from .models import Bot, BotVersion, BacktestConfig, BacktestRun, LiveRun
from accounts.serializers import AccountSerializer # Assuming you have this
from django.contrib.auth import get_user_model

User = get_user_model()

class UserSimpleSerializer(serializers.ModelSerializer):
    class Meta:
        model = User
        fields = ['id', 'username', 'email']

class BotSerializer(serializers.ModelSerializer):
    # account = AccountSerializer(read_only=True) # Or use PrimaryKeyRelatedField for writes
    account_id = serializers.UUIDField(source='account.id', allow_null=True, required=False, write_only=True)
    created_by = UserSimpleSerializer(read_only=True)
    created_by_id = serializers.IntegerField(write_only=True, required=False, allow_null=True)

    class Meta:
        model = Bot
        fields = [
            'id', 'name', 'account', 'account_id', 'strategy_template', 
            'is_active', 'created_by', 'created_by_id', 'created_at', 'updated_at'
        ]
        read_only_fields = ['id', 'created_at', 'updated_at', 'account', 'created_by']
    
    def create(self, validated_data):
        account_id = validated_data.pop('account_id', None)
        created_by_id = validated_data.pop('created_by_id', None)
        
        if account_id:
            validated_data['account_id'] = account_id
        
        # Set created_by from request user if not provided
        request_user = self.context['request'].user
        if request_user and request_user.is_authenticated:
            if created_by_id is None: # only set if not explicitly provided
                 validated_data['created_by'] = request_user
            elif created_by_id != request_user.id and not request_user.is_staff: # Non-staff cannot set other users
                raise serializers.ValidationError("You can only create bots for yourself.")
            else: # staff can set other users
                 validated_data['created_by_id'] = created_by_id
        elif created_by_id is None: # No request user and no id provided
            raise serializers.ValidationError("User context is required to create a bot or specify created_by_id.")
        else: # No request user but id provided (e.g. system process)
            validated_data['created_by_id'] = created_by_id
            
        return super().create(validated_data)

class BotVersionSerializer(serializers.ModelSerializer):
    bot_name = serializers.CharField(source='bot.name', read_only=True)

    class Meta:
        model = BotVersion
        fields = ['id', 'bot', 'bot_name', 'code_hash', 'params', 'notes', 'created_at']
        read_only_fields = ['id', 'code_hash', 'created_at', 'bot_name'] # code_hash is generated by service

class BacktestConfigSerializer(serializers.ModelSerializer):
    bot_version_info = serializers.CharField(source='bot_version.__str__', read_only=True)

    class Meta:
        model = BacktestConfig
        fields = [
            'id', 'bot_version', 'bot_version_info', 'risk_json', 
            'slippage_ms', 'slippage_r', 'label', 'created_at'
        ]
        read_only_fields = ['id', 'created_at', 'bot_version_info']

class BacktestRunSerializer(serializers.ModelSerializer):
    config_label = serializers.CharField(source='config.label', read_only=True, allow_null=True)
    bot_name = serializers.CharField(source='config.bot_version.bot.name', read_only=True)

    class Meta:
        model = BacktestRun
        fields = [
            'id', 'config', 'config_label', 'bot_name', 'data_window_start', 
            'data_window_end', 'equity_curve', 'stats', 'status', 'created_at'
        ]
        read_only_fields = ['id', 'equity_curve', 'stats', 'created_at', 'config_label', 'bot_name']

class LiveRunSerializer(serializers.ModelSerializer):
    bot_name = serializers.CharField(source='bot_version.bot.name', read_only=True)
    bot_version_created_at = serializers.DateTimeField(source='bot_version.created_at', read_only=True)

    class Meta:
        model = LiveRun
        fields = [
            'id', 'bot_version', 'bot_name', 'bot_version_created_at', 'started_at', 
            'stopped_at', 'status', 'pnl_r', 'drawdown_r', 'last_error'
        ]
        read_only_fields = ['id', 'started_at', 'stopped_at', 'pnl_r', 'drawdown_r', 'last_error', 'bot_name', 'bot_version_created_at']

# Serializers for specific actions
class LaunchBacktestSerializer(serializers.Serializer):
    bot_version_id = serializers.UUIDField()
    backtest_config_id = serializers.UUIDField()
    data_window_start = serializers.DateTimeField()
    data_window_end = serializers.DateTimeField()

    def validate(self, data):
        if data['data_window_start'] >= data['data_window_end']:
            raise serializers.ValidationError("data_window_end must be after data_window_start.")
        # Could add validation to check if BotVersion and BacktestConfig exist and are related
        return data

class BotVersionCreateSerializer(serializers.Serializer):
    bot_id = serializers.UUIDField()
    # strategy_code as a string field, or expect file upload handled by view
    strategy_file_content = serializers.CharField(write_only=True, help_text="Full content of the strategy's .py file")
    params = serializers.JSONField()
    notes = serializers.CharField(required=False, allow_blank=True, allow_null=True)

class StartLiveRunSerializer(serializers.Serializer):
    bot_version_id = serializers.UUIDField()
