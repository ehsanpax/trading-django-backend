"""
Django settings for trading_platform project.

Generated by 'django-admin startproject' using Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
from pathlib import Path
from datetime import timedelta
import environ
from corsheaders.defaults import default_headers  # Added for CORS custom headers

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Initialize environment variables
env = environ.Env(DEBUG=(bool, False))
environ.Env.read_env(os.path.join(BASE_DIR, ".env"))

MEDIA_URL = "/media/"
MEDIA_ROOT = os.path.join(BASE_DIR, "media")
CTRADER_API_BASE_URL = env("CTRADER_API_BASE_URL")
MT5_API_BASE_URL = env("MT5_API_BASE_URL")
LOG_DIR = BASE_DIR / env("LOG_DIR", default="logs")
LOG_DIR.mkdir(exist_ok=True)
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env("SECRET_KEY")
CHART_IMG_API_KEY = env("CHART_IMG_API_KEY")
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool("DEBUG", default=False)

ALLOWED_HOSTS = env.list("ALLOWED_HOSTS", default=["*"])

BACKEND_URL = env.str("BACKEND_URL", default="http://localhost:8000")
# Application definition

INSTALLED_APPS = [
    # Default Django apps...
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # Third-party apps
    "rest_framework",
    "rest_framework.authtoken",
    "django_celery_results",
    "django_celery_beat",
    # Your apps
    "trading",
    "accounts",
    "connectors",
    "corsheaders",
    "trades",
    "risk",
    "price",
    "channels",
    "trade_journal",
    "automations",
    "indicators",
    "calculators",
    "trade_history",
    "control",
    "chart_snapshots.apps.ChartSnapshotsConfig",
    "analysis",  # Added new analysis app
    "bots",
    "ta",  # Technical Analysis app
    "AI",  # AI Prompts app
    "charts",
    "fundamental",
    "monitoring",
    "user",
    "core",
    "task_logs",
    "messaging",  # New app for RabbitMQ consumer/producer
]


MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",  # Moved to top as recommended
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

CORS_ALLOW_ALL_ORIGINS = True
CORS_ALLOW_CREDENTIALS = True
# Allow custom headers used by the frontend
CORS_ALLOW_HEADERS = list(default_headers) + [
    "x-request-id",
    "idempotency-key",
]
# Expose response headers so the frontend can read them
CORS_EXPOSE_HEADERS = [
    "X-Request-ID",
    "Idempotency-Key",
]

ROOT_URLCONF = "trading_platform.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "trading_platform.wsgi.application"
ASGI_APPLICATION = "trading_platform.routing.application"

# Channels (tuned for backpressure mitigation)
CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            # Use a dedicated Redis DB for Channels to avoid contention with Celery
            "hosts": [env.str("CHANNEL_REDIS_URL", default="redis://redis:6379/1")],
            # Global default capacity per channel
            "capacity": env.int("CHANNEL_CAPACITY", default=2000),
            # Pattern-specific capacities (hot groups)
            "channel_capacity": {
                "prices_*": env.int("CHANNEL_CAPACITY_PRICES", default=2000),
                "candles_*": env.int("CHANNEL_CAPACITY_CANDLES", default=5000),
            },
            # Expiry for individual channels and groups
            "expiry": env.int("CHANNEL_EXPIRY_SEC", default=10),
            "group_expiry": env.int("CHANNEL_GROUP_EXPIRY_SEC", default=120),
        },
    },
}

# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases


DATABASES = {
    "default": {
        "ENGINE": env("DB_ENGINE", default="django.db.backends.postgresql"),
        "NAME": env("DB_NAME"),
        "USER": env("DB_USER"),
        "PASSWORD": env("DB_PASSWORD"),
        "HOST": env("DB_HOST"),
        "PORT": env("DB_PORT"),
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = os.path.join(BASE_DIR, "static")
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework_simplejwt.authentication.JWTAuthentication",  # adjust the module path as needed
        # ... other authentication classes if necessary
    ],
    "DEFAULT_PERMISSION_CLASSES": ("rest_framework.permissions.IsAuthenticated",),
    "EXCEPTION_HANDLER": "trading_platform.exceptions.custom_exception_handler",
}
SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(hours=8),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=7),
    "AUTH_HEADER_TYPES": ("Bearer",),
}

CTRADER_TOKEN_STORAGE = env("CTRADER_TOKEN_STORAGE", default="ctrader_tokens.json")

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "standard": {
            "format": "[%(asctime)s] %(levelname)s %(name)s: %(message)s",
            "datefmt": "%Y-%m-%d %H:%M:%S",
        },
        "task_formatter": {
            "format": "[%(asctime)s] [%(levelname)s] [%(name)s] [%(process)d] %(message)s",
            "datefmt": "%Y-%m-%d %H:%M:%S",
        },
    },
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            "formatter": "standard",
        },
        "file": {
            "class": "logging.FileHandler",
            "filename": LOG_DIR / "application.log",
            "formatter": "standard",
        },
        "db_log": {
            "level": "INFO",
            "class": "task_logs.handlers.DatabaseLogHandler",
            "formatter": "task_formatter",
        },
    },
    "loggers": {
        "": {  # root logger
            "handlers": ["console", "file"],
            "level": "INFO",
        },
        "django": {
            "handlers": ["console", "file"],
            "level": "INFO",
            "propagate": False,
        },
        "bots": {
            "handlers": ["console", "file", "db_log"],
            "level": "INFO",
            "propagate": False,
        },
        # you can add your project’s logger here, e.g.:
        "trading_platform": {
            "handlers": ["console", "file"],
            "level": "DEBUG",
            "propagate": False,
        },
    },
}


# ─── TradingView login ─────────────────────────────
TV_USERNAME = env("TV_USERNAME")
TV_PASSWORD = env("TV_PASSWORD")

# ─── Which symbols & where to fetch them ───────────
INDICATOR_SYMBOLS = ["EURUSD", "GBPUSD", "XAUUSD"]
SYMBOL_EXCHANGE_MAP = {
    "EURUSD": "OANDA",
    "GBPUSD": "FX_IDC",
    "XAUUSD": "OANDA",
}

# ─── Which timeframes to compute ────────────────────


# ─── Celery broker & beat ───────────────────────────
CELERY_BROKER_URL = env("CELERY_BROKER_URL")
# CELERY_BEAT_SCHEDULE is now defined in trading_platform/celery_app.py
# Ensure django-celery-beat is not also scheduling this task via the admin if it's installed.

# Make Celery align with Django timezone (UTC) and use DB scheduler by default
CELERY_TIMEZONE = "UTC"
CELERY_ENABLE_UTC = True
CELERY_BEAT_SCHEDULER = "django_celery_beat.schedulers:DatabaseScheduler"
# Keep beat loop responsive for sub-minute intervals
CELERY_BEAT_MAX_LOOP_INTERVAL = int(os.getenv("CELERY_BEAT_MAX_LOOP_INTERVAL", "5"))

# Celery Worker Soft/Hard Limits to prevent memory leaks and crashes
CELERYD_MAX_TASKS_PER_CHILD = 100  # Restart worker process after 100 tasks
CELERYD_MAX_MEMORY_PER_CHILD = (
    500000  # Restart worker process if memory exceeds 500MB (in KB)
)

CELERY_TASK_ROUTES = {
    "bots.tasks.live_loop": {"queue": "live_bots"},
    "bots.tasks.run_backtest": {"queue": "backtests"},
    "trades.tasks.trigger_trade_synchronization": {"queue": "celery"},
    # Define other task routes here if needed, or use a wildcard for default queue
    # 'myapp.tasks.*': {'queue': 'default_queue'},
}

CELERY_RESULT_BACKEND = env("CELERY_RESULT_BACKEND")
DATA_ROOT = BASE_DIR / "analysis_data"  # Added for analysis app
DATA_ROOT.mkdir(exist_ok=True)  # Ensure the directory exists

OANDA_ACCESS_TOKEN = env("OANDA_ACCESS_TOKEN")
OANDA_ENVIRONMENT = env("OANDA_ENVIRONMENT")


CELERY_RESULT_BACKEND = "django-db"

# Concurrency controls (locks/cooldowns)
# If REDIS_URL not provided, the utils will fallback to CELERY_BROKER_URL or no-op.
REDIS_URL = env.str("REDIS_URL", default=os.getenv("REDIS_URL", ""))
EXEC_LOCK_TTL_MS = env.int("EXEC_LOCK_TTL_MS", default=5000)  # 5s default
MIN_ENTRY_COOLDOWN_SEC = env.int(
    "MIN_ENTRY_COOLDOWN_SEC", default=0
)  # per-run default; strategy may override

# --- AI Strategy Generation Service settings ---
AI_STRATEGY_API_URL = env.str(
    "AI_STRATEGY_API_URL",
    default="https://endlessly-central-gelding.ngrok-free.app/webhook/6b891469-8e13-40be-80ed-767932094cff",
)
AI_STRATEGY_API_KEY = env.str("AI_STRATEGY_API_KEY", default="")
AI_STRATEGY_TIMEOUT_SEC = env.int("AI_STRATEGY_TIMEOUT_SEC", default=15)
AI_STRATEGY_MAX_PROMPT_CHARS = env.int("AI_STRATEGY_MAX_PROMPT_CHARS", default=4000)
AI_STRATEGY_CACHE_TTL_SEC = env.int("AI_STRATEGY_CACHE_TTL_SEC", default=600)
AI_STRATEGY_RETRY_MAX_ATTEMPTS = env.int("AI_STRATEGY_RETRY_MAX_ATTEMPTS", default=2)
AI_STRATEGY_CIRCUIT_FAIL_MAX = env.int("AI_STRATEGY_CIRCUIT_FAIL_MAX", default=5)
AI_STRATEGY_CIRCUIT_RESET_SEC = env.int("AI_STRATEGY_CIRCUIT_RESET_SEC", default=60)

# DRF throttle rate for the strategy generation endpoint (ScopedRateThrottle scope: 'strategy_gen')
REST_FRAMEWORK["DEFAULT_THROTTLE_RATES"] = {
    **REST_FRAMEWORK.get("DEFAULT_THROTTLE_RATES", {}),
    "strategy_gen": env.str("THROTTLE_RATE_STRATEGY_GEN", default="20/min"),
}

# --- Bots tracing/explainability feature flags ---
BOTS_TRACE_ENABLED_DEFAULT = env.bool("BOTS_TRACE_ENABLED_DEFAULT", default=True)
BOTS_TRACE_MAX_ROWS = env.int("BOTS_TRACE_MAX_ROWS", default=250_000)
BOTS_TRACE_BATCH_SIZE = env.int("BOTS_TRACE_BATCH_SIZE", default=1000)
BOTS_TRACE_SAMPLING = env.int("BOTS_TRACE_SAMPLING", default=1)

INTERNAL_SHARED_SECRET = env.str(
    "INTERNAL_SHARED_SECRET", default=os.getenv("APP_INTERNAL_SHARED_SECRET", "")
)
if not INTERNAL_SHARED_SECRET:
    # Generate a stable-on-boot random secret if none provided (dev only). For prod, set env var.
    import secrets

    INTERNAL_SHARED_SECRET = secrets.token_urlsafe(32)

# Feature flags
REALTIME_TS_ONLY = env.bool("REALTIME_TS_ONLY", default=False)
EXECUTE_VIA_TS = env.bool("EXECUTE_VIA_TS", default=False)
