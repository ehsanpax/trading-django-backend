"""
Django settings for trading_platform project.

Generated by 'django-admin startproject' using Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""
import os
from pathlib import Path
from datetime import timedelta
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
CTRADER_API_BASE_URL = "http://localhost:8080"
LOG_DIR = BASE_DIR / "logs"
LOG_DIR.mkdir(exist_ok=True)
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-$u3ceh^n!)-++(v@#0%zku#)p0djp0)z5v4v53&(ensmztfd$)'
CHART_IMG_API_KEY = "4Bx0ltLxeI3y8irqCiZTJ6A2WvJyuLJl1pmmWix5"
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]


# Application definition

INSTALLED_APPS = [
    # Default Django apps...
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # Third-party apps
    'rest_framework',
    "rest_framework.authtoken",
    # Your apps
    'trading',
    'accounts',
    'connectors',
    'corsheaders',
    'mt5',
    'trades',
    'risk',
    'price',
    'channels',
    'trade_journal',
    'automations',
    'indicators',
    'calculators',
    'trade_history',
    'chart_snapshots.apps.ChartSnapshotsConfig',
    'analysis', # Added new analysis app
    'bots',
    'ta',  # Technical Analysis app
]



MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
]

CORS_ALLOW_ALL_ORIGINS = True
CORS_ALLOW_CREDENTIALS = True

ROOT_URLCONF = 'trading_platform.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'trading_platform.wsgi.application'
ASGI_APPLICATION = 'trading_platform.asgi.application'

# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'trading',
        'USER': 'paksisadmin',
        'PASSWORD': 'P4ks1s_90fT2&2',
        'HOST': 'localhost',
        'PORT': '5432',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',  # adjust the module path as needed
        # ... other authentication classes if necessary
    ],
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
}
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(hours=8),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
    'AUTH_HEADER_TYPES': ('Bearer',),
}

CTRADER_TOKEN_STORAGE = "ctrader_tokens.json"

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "standard": {
            "format": "[%(asctime)s] %(levelname)s %(name)s: %(message)s",
            "datefmt": "%Y-%m-%d %H:%M:%S",
        },
    },
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            "formatter": "standard",
        },
        "file": {
            "class": "logging.FileHandler",
            "filename": LOG_DIR / "application.log",
            "formatter": "standard",
        },
    },
    "loggers": {
        "": {  # root logger
            "handlers": ["console", "file"],
            "level": "INFO",
        },
        "django": {
            "handlers": ["console", "file"],
            "level": "INFO",
            "propagate": False,
        },
        # you can add your project’s logger here, e.g.:
        "trading_platform": {
            "handlers": ["console", "file"],
            "level": "DEBUG",
            "propagate": False,
        },
    },
}


# ─── TradingView login ─────────────────────────────
TV_USERNAME = "your_tv_username"
TV_PASSWORD = "your_tv_password"

# ─── Which symbols & where to fetch them ───────────
INDICATOR_SYMBOLS = ["EURUSD", "GBPUSD", "XAUUSD"]
SYMBOL_EXCHANGE_MAP = {
    "EURUSD": "OANDA",
    "GBPUSD": "FX_IDC",
    "XAUUSD": "OANDA",
}

# ─── Which timeframes to compute ────────────────────
from tvDatafeed import Interval
INDICATOR_TIMEFRAMES = {
    "M1":  Interval.in_1_minute,
    "M5":  Interval.in_5_minute,
    # add more as needed…
}

# ─── Celery broker & beat ───────────────────────────
CELERY_BROKER_URL = "redis://localhost:6379/0"
# CELERY_BEAT_SCHEDULE is now defined in trading_platform/celery_app.py
# Ensure django-celery-beat is not also scheduling this task via the admin if it's installed.

# Celery Worker Soft/Hard Limits to prevent memory leaks and crashes
CELERYD_MAX_TASKS_PER_CHILD = 100  # Restart worker process after 100 tasks
CELERYD_MAX_MEMORY_PER_CHILD = 500000 # Restart worker process if memory exceeds 500MB (in KB)

CELERY_TASK_ROUTES = {
    'bots.tasks.live_loop': {'queue': 'live_bots'},
    'bots.tasks.run_backtest': {'queue': 'backtests'},
    # Define other task routes here if needed, or use a wildcard for default queue
    # 'myapp.tasks.*': {'queue': 'default_queue'},
}

CELERY_RESULT_BACKEND = "redis://localhost:6379/0" # Added for analysis app
DATA_ROOT = BASE_DIR / 'analysis_data' # Added for analysis app
DATA_ROOT.mkdir(exist_ok=True) # Ensure the directory exists

OANDA_ACCESS_TOKEN = "8617505e3109641a4bc8b10bcbf546ed-d1a4b2273a700dcbc4840439c9701e42" # Added for OANDA data fetcher
OANDA_ENVIRONMENT = "practice" # Added for OANDA data fetcher
